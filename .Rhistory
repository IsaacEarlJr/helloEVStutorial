#| label: onedrive
#| message: false
#| warning: false
#| include: false
# Get the OneDrive path dynamically
onedrive_path <- Sys.getenv("OneDrive")
onedrive_path
print(onedrive_path)
library(tidyverse)
library(tidyverse) # one of the most useful packages
# load libraries ------
library(readxl)
library(sf) # package to deal with GIS systems
library(mapview) # to visualize maps
library(tidyverse) # one of the most useful packages
# Exercises ------
# Load data ------
# If you want to load one single file, you can load it using the following code
data <- read_excel("data/group_1_sps_id.xlsx")
# check the data
data
# Load multiple files -----
data_all <- list.files("data/",
pattern = "id.xlsx", # define the pattern of the files you want to read
full.names = TRUE)
data_all
# Load multiple files -----
data_all <- list.files("data",
pattern = "id.xlsx", # define the pattern of the files you want to read
full.names = TRUE)
# Load multiple files -----
data_all <- list.files("data", # define the path of the files
pattern = "id.xlsx", # define the pattern of the files you want to read
full.names = TRUE) |>  # read full name
purrr::map_dfr(~ read_excel)
data
# Load multiple files -----
data_all <- list.files("data", # define the path of the files
pattern = "id.xlsx", # define the pattern of the files you want to read
full.names = TRUE) |>  # read full name
purrr::map_dfr(~ read_excel(.))
# To fix that, let's use a function to read and convert the count column to numeric
read_and_convert <- function(file) {
data <- read_excel(file)
data <- data %>%
mutate(count = as.numeric(count))
return(data)
}
data_all <- list.files("data", # define the path of the files
pattern = "id.xlsx", # define the pattern of the files you want to read
full.names = TRUE) |>  # read full name
purrr::map_dfr(~ read_and_convert(.))
data_all
# After loading data and manipulating your data, running different functions, it is always good practice to check the data. One function I like to check the data is 'glimpse', because it tells you what kind of data you have. Let's have a look:
glimpse(data_all)
data_all |>
count(count)
# After loading data and manipulating your data, running different functions, it is always good practice to check the data. One function I like to check the data is 'glimpse', because it tells you what kind of data you have. Let's have a look:
glimpse(data_all)
data_all |>
distinct(species) |>
count(count)
data_all |>
distinct(species) |>
count()
# Count the number of unique species and return their names along with the counts
data_all |>
group_by(species) |>
summarize(count = n()) |>
arrange(desc(count))
# mapview -----
# create an sf object
data_all_sf <- st_as_sf(data_all,
coords = c("long", "lat"),
crs = 4326)
# Remove NAs values
data_filter <- data_all |>
filter(!is.na(long) & !is.na(lat)) # filter() remove lines where the columns long and lat has NAs
# Create an sf object with the cleaned data
data_sf <- st_as_sf(data_filter,
coords = c("long", "lat"),
crs = 4326) # set coordinates system as WGS84
# Mapview ----
mapview(data_sf)
mapview(data_sf, zcol = species)
data_sf
mapview(data_sf, zcol = "species")
# color by date
mapview(data_sf, zcol = "date")
# Plotting with ggplot
ggplot(data_all_clean, aes(x = long, y = lat, color = species)) +
geom_point() +
theme_minimal() +
labs(title = "Distribuição das Espécies",
x = "Longitude",
y = "Latitude",
color = "Espécies")
# Plotting with ggplot ------
ggplot(data_filter, aes(x = long, y = lat, color = species)) +
geom_point() +
theme_minimal() +
labs(title = "Distribuição das Espécies",
x = "Longitude",
y = "Latitude",
color = "Espécies")
# Save files as unique files ------
data_all |>
write_xlx("data/sps_id_all.xlsx")
# Save files as unique files ------
data_all |>
write_xlsx("data/sps_id_all.xlsx")
# Save files as unique files ------
data_all |>
write_xlsx("data/sps_id_all.xlsx")
# Save files as unique files ------
data_all |>
writexl::write_xlsx("data/sps_id_all.xlsx")
# Load tree data -----
tree <- list.files("data", # define the path of the files
pattern = "measurement.xlsx", # define the pattern of the files you want to read
full.names = TRUE) |>  # read full name
purrr::map_dfr(~ read_excel(.))
tree
View(tree)
# Save files -----
tree |>
writexl::write_xlsx("data/tree_measurement_all.xlsx")
