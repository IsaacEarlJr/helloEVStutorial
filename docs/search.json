[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EVS 3000L JS Map Tutorial",
    "section": "",
    "text": "This document was developed for the School of Natural Resources and Environment at the University of Florida."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "EVS 3000L JS in GIS Tutorial",
    "section": "1 Introduction",
    "text": "1 Introduction\nThis tutorial provides a simple introduction to Geographic Information Systems (GIS) and basic programming concepts in a way that connects directly to natural resources and environmental analysis. The goal is to offer a foundational understanding that makes GIS and coding more approachable and useful if students encounter these topics in future coursework or careers.\nRather than focusing solely on proprietary software, this tutorial introduces students to open-source tools and workflows that support spatial analysis and data visualization. By using GitHub for version control and collaboration, and integrating open-source GIS software alongside ArcGIS Online, students will gain experience with practical, widely used geospatial methods.\nFor this exercise, we will work with data collected from the Natural Area Teaching Lab (NATL). The data will be hosted on ArcGIS Online and we will use GitHub as a repository to develop and explore GIS functions, interactive web mapping, and reproducible workflows.\n\n1.1 Why Open-Source?\n\nAccessibility: Open-source GIS tools like QGIS, Leaflet, and GeoPandas provide free alternatives to proprietary software, lowering financial barriers.\nCollaboration: Using GitHub fosters version control, teamwork, and transparent sharing of spatial data and code.\nReproducibility: Open-source programming in Python (GeoPandas, Folium) or JavaScript (Leaflet) allows users to automate spatial analyses and create dynamic web maps that can be shared and modified by others.\nIntegration: Open-source GIS can work alongside proprietary tools (ArcGIS Online, Esri APIs), providing flexibility in different workflows.\n\n\n\n1.2 What You’ll Learn\n\nBasic GIS concepts – how spatial data is structured and analyzed.\nIntroduction to open-source GIS tools – Leaflet libraries\nHosting and managing geospatial data using ArcGIS Online and GitHub.\nSimple programming for GIS – writing basic scripts in JavaScript to interact with maps and data.\nWeb mapping fundamentals – building interactive maps using Leaflet.js.\n\nBy the end of this tutorial, students will have a working knowledge of open-source GIS and programming methods that they can build upon for research, environmental management, and natural resource applications.\n\n\n1.3 Before You Begin\nTo complete this tutorial, you will need:\n\nA GitHub account to manage your code. GitHub\nAn ArcGIS Online account to access GIS data services. ArcGIS Online\n\n(GitHub is free, but ArcGIS Online requires affiliation with an institution (e.g., a university) or a paid subscription. If you are a student, check with your school for access.)\nFor an overview of all GIS functions used in this tutorial, see the References section at the bottom.\nFor additional information on Leaflet, an open-source JavaScript library for mobile-friendly interactive maps, visit the Leaflet Documentation."
  },
  {
    "objectID": "index.html#step-1-basic-html-structure",
    "href": "index.html#step-1-basic-html-structure",
    "title": "EVS 3000L JS in GIS Tutorial",
    "section": "2 Step 1: Basic HTML Structure",
    "text": "2 Step 1: Basic HTML Structure\nEvery webpage starts with a simple HTML structure.\n\nThe &lt;!DOCTYPE html&gt; declaration, which tells the browser we are using HTML5.\nThe &lt;html&gt; element, which wraps everything inside the document.\nThe &lt;head&gt; section, where we define the title of the page.\nThe &lt;body&gt; section, which contains the visible content.\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;EVS 3000L&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p&gt;Hello, EVS!&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;"
  },
  {
    "objectID": "index.html#step-2-adding-javascript-libraries",
    "href": "index.html#step-2-adding-javascript-libraries",
    "title": "EVS 3000L JS in GIS Tutorial",
    "section": "3 Step 2: Adding JavaScript Libraries",
    "text": "3 Step 2: Adding JavaScript Libraries\nIn this step, we install Leaflet, a JavaScript library designed for interactive mapping.\n\n3.1 What is a Library?\n\nA library is a collection of pre-written code that provides useful functions.\n\nIt saves time and effort by allowing us to perform tasks without writing every function from scratch.\n\nIn GIS, mapping libraries help:\n\nManage spatial data\n\nRender maps\n\nCreate interactive features\n\n\n\n\n3.2 Why Use Leaflet?\n\nLightweight, efficient, and easy to use.\n\nProvides built-in tools for displaying maps, adding layers, and handling user interactions.\n\nAllows us to quickly set up an interactive map with minimal code.\n\n\n\n3.3 Loading Leaflet from a CDN\nThe code below loads Leaflet from a Content Delivery Network (CDN), making it available for use in our project.\n\n&lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" /&gt;\n&lt;script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"&gt;&lt;/script&gt;\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;EVS 3000L&lt;/title&gt;\n\n    &lt;!-- Load Leaflet from CDN --&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" /&gt;\n    &lt;script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p&gt;Leaflet is now ready!&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nAfter adding this, Leaflet is installed and ready to use, allowing us to create and customize interactive maps in the next steps.\nLearn more about Leaflet: Leaflet Official Documentation"
  },
  {
    "objectID": "index.html#step-3-adding-css-styles",
    "href": "index.html#step-3-adding-css-styles",
    "title": "EVS 3000L JS in GIS Tutorial",
    "section": "4 Step 3: Adding CSS Styles",
    "text": "4 Step 3: Adding CSS Styles\nIn this step, we define styles using CSS (Cascading Style Sheets). The CSS controls the appearance and layout of web elements, allowing customization of colors, fonts, spacing, and responsiveness. The # symbol targets a specific element by its unique ID, ensuring only that element receives the defined styles, while other selectors like . (class) apply styles to multiple elements.\n\n4.1 What Does CSS Do?\n\nAllows us to set colors, fonts, spacing, and layout.\n\nMakes content visually structured and easy to interact with.\n\n\n\n4.2 How It Applies to Leaflet:\n\nEnsures the map displays correctly by setting its size.\n\nThe #mapid container is given a height of 100% of the viewport height (100vh); width is set to 100%.\n\nThe width is set to 100%, making the map responsive.\n\n\n\n4.3 Understanding (div) Elements:\n\nThe &lt;div&gt; element is a container that groups and organizes content.\nThe id=\"mapid\" attribute gives the &lt;div&gt; a unique identifier, allowing us to target it with CSS and JavaScript.\nWithout this container &lt;div&gt;, the map would not have a place to display on the webpage.\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;EVS 3000L&lt;/title&gt;\n\n    &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" /&gt;\n    &lt;script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"&gt;&lt;/script&gt;\n\n    &lt;style&gt;\n        #mapid {\n            height: 100vh;\n            width: 100%;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"mapid\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nW3Schools offers a CSS testing tool where you can experiment with CSS code on the fly, and it also provides similar tools for HTML, JavaScript, and other web technologies.]"
  },
  {
    "objectID": "index.html#step-4-initialize-leaflet-map",
    "href": "index.html#step-4-initialize-leaflet-map",
    "title": "EVS 3000L JS in GIS Tutorial",
    "section": "5 Step 4: Initialize Leaflet Map",
    "text": "5 Step 4: Initialize Leaflet Map\nNow that Leaflet is installed and styled, we need to initialize the map so it appears on the webpage.\nThis step creates a map instance, which is the core object that manages how the map is displayed and interacts with data.\n\n5.1 What Happens in This Step?\n\nCreates a map instance → L.map('mapid') connects Leaflet to the &lt;div&gt; where the map will be displayed.\n\nSets the center of the map → The coordinates [29.7993, -82.7728] define the starting point (latitude, longitude).\n\nDefines the zoom level → 8.8 sets how far the map is zoomed in (higher numbers zoom in closer).\n\n\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;EVS 3000L&lt;/title&gt;\n\n    &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" /&gt;\n    &lt;script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"&gt;&lt;/script&gt;\n\n    &lt;style&gt;\n        #mapid {\n            height: 100vh;\n            width: 100%;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"mapid\"&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n        var mymap = L.map('mapid').setView([29.7993, -82.7728], 8.8);\n    &lt;/script&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;"
  },
  {
    "objectID": "index.html#step-5-add-base-layers",
    "href": "index.html#step-5-add-base-layers",
    "title": "EVS 3000L JS in GIS Tutorial",
    "section": "6 Step 5: Add Base Layers",
    "text": "6 Step 5: Add Base Layers\nNow that we have initialized the map, we need to add base layers, which serve as the background and provide geographic context for our data. A base layer displays features like roads, terrain, or satellite imagery, helping users interpret spatial information.\nIn this step, we will add two different base layers and include a control panel that lets users switch between them.\n\n6.1 What Happens in This Step?\n\nLoads base layers (Maps) using L.tileLayer() → This function retrieves different map backgrounds, such as street maps, satellite imagery, and terrain views, from external sources.\nUses addLayersControl() → A function that enables users to toggle between base layers using a built-in Leaflet control button.\n\nLearn more about Leaflet OpenStreet Baselayers:\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Leaflet Base Layers&lt;/title&gt;\n\n    &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" /&gt;\n    &lt;script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"&gt;&lt;/script&gt;\n\n    &lt;style&gt;\n        #mapid {\n            height: 100vh;\n            width: 100%;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"mapid\"&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n        var mymap = L.map('mapid').setView([29.6339, -82.3699], 16.8);\n\n        var earth = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            maxZoom: 19,\n            attribution: 'Map data © OpenStreetMap'\n        }).addTo(mymap);\n\n        var satellite = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n            attribution: 'Tiles &copy; Esri, Earthstar Geographics',\n            maxZoom: 19\n        });\n\n        L.control.layers({\n            \"Earth\": earth,\n            \"Satellite\": satellite\n        }).addTo(mymap);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;"
  },
  {
    "objectID": "index.html#step-6-add-feature-layers",
    "href": "index.html#step-6-add-feature-layers",
    "title": "EVS 3000L JS in GIS Tutorial",
    "section": "7 Step 6: Add Feature Layers",
    "text": "7 Step 6: Add Feature Layers\nNow that we have set up the base layers, it’s time to add feature layers, which are data layers that contain specific geographic features such as boundaries, points, or polygons. In this step, we will load the NATL Data from an ArcGIS Online feature service and display them on our map.\n\n7.1 What Happens in This Step?\n\nLoads Esri Leaflet → A plugin that allows us to use ArcGIS feature layers in Leaflet. (We need to another library similar to what we did in Step 2)\n\nErri Leaflet Library: &lt;script src=\"https://unpkg.com/esri-leaflet\"&gt;&lt;/script&gt;\n\nAdds a feature layer from ArcGIS Online\n\n'https://services.arcgis.com/LBbVDC0hKPAnLRpO/arcgis/rest/services/tree_measurement_all/FeatureServer/0'\n\n\n\n\n7.2 Why Do We Need Feature Layers?\n\nUnlike base layers, which provide a background map, feature layers display specific data such as roads, water bodies, protected areas, or administrative boundaries.\n\nFeature layers allow users to visualize, analyze, and interact with geographic data.\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;EVS 3000L&lt;/title&gt;\n\n\n    &lt;!-- Load Leaflet from CDN --&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" /&gt;\n    &lt;script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- Load Esri Leaflet --&gt;\n    &lt;script src=\"https://unpkg.com/esri-leaflet\"&gt;&lt;/script&gt;\n\n    &lt;style&gt;\n        #mapid {\n            height: 100vh;\n            width: 100%;\n        }\n    &lt;/style&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n    &lt;!-- Map Container --&gt;\n    &lt;div id=\"mapid\"&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n        // Initialize Map\n        var mymap = L.map('mapid').setView([29.6339, -82.3699], 16.8);\n\n        // Base Layers\n        var earth = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            maxZoom: 19,\n            attribution: 'Map data © &lt;a href=\"https://www.openstreetmap.org/\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n        }).addTo(mymap);\n\n        var satellite = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n            attribution: 'Tiles &copy; Esri, Earthstar Geographics',\n            maxZoom: 19\n        });\n\n        // Layer Control\n        var baseMaps = {\n            \"Earth\": earth,\n            \"Satellite\": satellite\n        };\n\n        L.control.layers(baseMaps).addTo(mymap);\n\n        // Feature Layer from ArcGIS Online\n        var featureLayer = L.esri.featureLayer({\n            url: 'https://services.arcgis.com/LBbVDC0hKPAnLRpO/arcgis/rest/services/tree_measurement_all/FeatureServer/0',\n            \n\n        }).addTo(mymap);\n\n\n\n    &lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\nArcGIS Online: A cloud-based GIS platform for mapping, analysis, and data sharing."
  },
  {
    "objectID": "index.html#step-7-add-feature-layer-functions",
    "href": "index.html#step-7-add-feature-layer-functions",
    "title": "EVS 3000L JS in GIS Tutorial",
    "section": "8 Step 7: Add Feature Layer Functions",
    "text": "8 Step 7: Add Feature Layer Functions\nNow that we’ve completed our map with data, let’s add a feature layer function that allows us to interact with the data. These functions enhance our map by displaying circle markers at each data point while providing important popup information when clicked.\n\nstyle: function ()\n\nThis function defines the visual appearance of the feature layer.\n\nonEachFeature: function (feature, layer)\n\nThis function creates a popup tool that allows users to view detailed information when clicking a feature.\n\n\n\n8.1 Why This Matters\nThis step transforms your static map into an interactive ecological data visualization tool. By integrating a feature layer function, you make the map more informative and user-friendly, allowing users to explore data directly on the map rather than relying on a separate table or document.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;EVS 3000L&lt;/title&gt;\n\n\n    &lt;!-- Load Leaflet from CDN --&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" /&gt;\n    &lt;script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- Load Esri Leaflet --&gt;\n    &lt;script src=\"https://unpkg.com/esri-leaflet\"&gt;&lt;/script&gt;\n\n    &lt;style&gt;\n        #mapid {\n            height: 100vh;\n            width: 100%;\n        }\n    &lt;/style&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n    &lt;!-- Map Container --&gt;\n    &lt;div id=\"mapid\"&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n        // Initialize Map\n        var mymap = L.map('mapid').setView([29.6339, -82.3699], 16.8);\n\n        // Base Layers\n        var earth = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            maxZoom: 19,\n            attribution: 'Map data © &lt;a href=\"https://www.openstreetmap.org/\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n        }).addTo(mymap);\n\n        var satellite = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n            attribution: 'Tiles &copy; Esri, Earthstar Geographics',\n            maxZoom: 19\n        });\n\n        // Layer Control\n        var baseMaps = {\n            \"Earth\": earth,\n            \"Satellite\": satellite\n        };\n\n        L.control.layers(baseMaps).addTo(mymap);\n\n        // Feature Layer from ArcGIS Online\n        var featureLayer = L.esri.featureLayer({\n            url: 'https://services.arcgis.com/LBbVDC0hKPAnLRpO/arcgis/rest/services/tree_measurement_all/FeatureServer/0',\n            style: function () {\n                return { color: \"blue\", weight: 1, fillOpacity: 0.6 };\n            },\n            pointToLayer: function (geojson, latlng) {\n                return L.circleMarker(latlng, {\n                    radius: 8,  // Adjust size of circles\n                    fillColor: \"red\",\n                    color: \"white\",\n                    weight: 1,\n                    opacity: 1,\n                    fillOpacity: 0.8\n                });\n            },\n\n            onEachFeature: function (feature, layer) {\n                // Content for hover/click popup\n                var popupContent = `\n                    &lt;strong&gt;Species:&lt;/strong&gt; ${feature.properties.species || \"Unknown\"}&lt;br&gt;\n                    &lt;strong&gt;DBH:&lt;/strong&gt; ${feature.properties.dbh_inches || \"N/A\"} inches&lt;br&gt;\n                    &lt;strong&gt;Height:&lt;/strong&gt; ${feature.properties.height_stick_feet_inches || \"N/A\"} feet&lt;br&gt;\n                    &lt;strong&gt;Names:&lt;/strong&gt; ${feature.properties.names || \"N/A\"}&lt;br&gt;\n                    &lt;strong&gt;Location:&lt;/strong&gt; ${feature.properties.location || \"N/A\"}&lt;br&gt;\n                `;\n                layer.bindPopup(popupContent);\n            }\n\n        }).addTo(mymap);\n\n\n\n    &lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n8.2 Congratulations! 🎉\nYou have now coded and built your first environmental GIS-based webpage! You’ve learned a new way to work with spatial data while learning basic programming concepts."
  },
  {
    "objectID": "index.html#table-of-contents",
    "href": "index.html#table-of-contents",
    "title": "EVS 3000L JS Map Tutorial",
    "section": "1 Table of Contents",
    "text": "1 Table of Contents\n\nIntroduction\nBefore You Begin\nStep 1: Basic HTML Structure\nStep 2: Adding JavaScript Libraries\nStep 3: Adding CSS Styles\nStep 4: Initialize Leaflet Map\nStep 5: Add Base Layers\nStep 6: Add Feature Layers\nStep 7: Add Feature Layer Functions\nReferences"
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "EVS 3000L JS in GIS Tutorial",
    "section": "9 References",
    "text": "9 References\nThis section provides a quick overview of the main GIS functions used in this tutorial.\n\n9.1 Leaflet Functions\n\nL.map() – Initializes the map. Docs\nL.tileLayer() – Adds basemap layers. Docs\nL.control.layers() – Allows switching between basemaps. Docs\nL.circleMarker() – Creates circle markers for point features. Docs\nlayer.bindPopup() – Displays feature attributes in a popup. Docs\n\n\n\n9.2 Esri Leaflet Functions\n\nL.esri.featureLayer() – Loads ArcGIS Online feature layers. Docs\n\n\n\n9.3 Additional Resources\n\nLeaflet Quick Start Guide\nGitHub Guide\nEsri Leaflet Documentation"
  },
  {
    "objectID": "index.html#why-open-source",
    "href": "index.html#why-open-source",
    "title": "EVS 3000L JS Map Tutorial",
    "section": "1.1 Why Open-Source?",
    "text": "1.1 Why Open-Source?\n\nAccessibility: Open-source GIS tools like QGIS, Leaflet, and GeoPandas provide free alternatives to proprietary software, lowering financial barriers.\nCollaboration: Using GitHub fosters version control, teamwork, and transparent sharing of spatial data and code.\nReproducibility: Open-source programming in Python (GeoPandas, Folium) or JavaScript (Leaflet) allows users to automate spatial analyses and create dynamic web maps that can be shared and modified by others.\nIntegration: Open-source GIS can work alongside proprietary tools (ArcGIS Online, Esri APIs), providing flexibility in different workflows."
  },
  {
    "objectID": "index.html#what-youll-learn",
    "href": "index.html#what-youll-learn",
    "title": "EVS 3000L JS Map Tutorial",
    "section": "1.2 What You’ll Learn",
    "text": "1.2 What You’ll Learn\n\nBasic GIS concepts – how spatial data is structured and analyzed.\nIntroduction to open-source GIS tools – including QGIS, Leaflet, and GeoPandas.\nHosting and managing geospatial data using ArcGIS Online and GitHub.\nSimple programming for GIS – writing basic scripts in Python or JavaScript to interact with maps and data.\nWeb mapping fundamentals – building interactive maps using Leaflet.js.\n\nBy the end of this tutorial, students will have a working knowledge of open-source GIS and programming methods that they can build upon for research, environmental management, and natural resource applications.\n\n1.2.1 Before You Begin\nTo complete this tutorial, you will need:\n\nA GitHub account to manage your code. GitHub\nAn ArcGIS Online account to access GIS data services. ArcGIS Online\n\n(GitHub is free, but ArcGIS Online requires affiliation with an institution (e.g., a university) or a paid subscription. If you are a student, check with your school for access.)\nFor an overview of all GIS functions used in this tutorial, see the References section at the bottom.\nFor additional information on Leaflet, an open-source JavaScript library for mobile-friendly interactive maps, visit the Leaflet Documentation."
  },
  {
    "objectID": "index.html#introduction-to-open-source-geographic-information-systems-gis-and-programming-for-natural-resources",
    "href": "index.html#introduction-to-open-source-geographic-information-systems-gis-and-programming-for-natural-resources",
    "title": "EVS 3000L JS Map Tutorial",
    "section": "2 Introduction to Open-Source Geographic Information Systems (GIS) and Programming for Natural Resources",
    "text": "2 Introduction to Open-Source Geographic Information Systems (GIS) and Programming for Natural Resources\nThis tutorial provides a simple introduction to Geographic Information Systems (GIS) and basic programming concepts in a way that connects directly to natural resources and environmental analysis. The goal is to offer a foundational understanding that makes GIS and coding more approachable and useful if students encounter these topics in future coursework or careers.\nRather than focusing solely on proprietary software, this tutorial introduces students to open-source tools and workflows that support spatial analysis and data visualization. By using GitHub for version control and collaboration, and integrating open-source GIS software alongside ArcGIS Online, students will gain experience with practical, widely used geospatial methods.\nFor this exercise, we will work with data collected from the Natural Area Teaching Lab (NATL). The data will be hosted on ArcGIS Online, but we will also explore QGIS as an open-source alternative. Additionally, we will use GitHub as a repository to develop and explore GIS functions, interactive web mapping, and reproducible workflows.\n\n2.1 Why Open-Source?\n\nAccessibility: Open-source GIS tools like QGIS, Leaflet, and GeoPandas provide free alternatives to proprietary software, lowering financial barriers.\nCollaboration: Using GitHub fosters version control, teamwork, and transparent sharing of spatial data and code.\nReproducibility: Open-source programming in Python (GeoPandas, Folium) or JavaScript (Leaflet) allows users to automate spatial analyses and create dynamic web maps that can be shared and modified by others.\nIntegration: Open-source GIS can work alongside proprietary tools (ArcGIS Online, Esri APIs), providing flexibility in different workflows.\n\n\n\n2.2 What You’ll Learn\n\nBasic GIS concepts – how spatial data is structured and analyzed.\nIntroduction to open-source GIS tools – including QGIS, Leaflet, and GeoPandas.\nHosting and managing geospatial data using ArcGIS Online and GitHub.\nSimple programming for GIS – writing basic scripts in Python or JavaScript to interact with maps and data.\nWeb mapping fundamentals – building interactive maps using Leaflet.js.\n\nBy the end of this tutorial, students will have a working knowledge of open-source GIS and programming methods that they can build upon for research, environmental management, and natural resource applications.\n\n\n2.3 Before You Begin\nTo complete this tutorial, you will need:\n\nA GitHub account to manage your code. GitHub\nAn ArcGIS Online account to access GIS data services. ArcGIS Online\n\n(GitHub is free, but ArcGIS Online requires affiliation with an institution (e.g., a university) or a paid subscription. If you are a student, check with your school for access.)\nFor an overview of all GIS functions used in this tutorial, see the References section at the bottom.\nFor additional information on Leaflet, an open-source JavaScript library for mobile-friendly interactive maps, visit the Leaflet Documentation."
  }
]